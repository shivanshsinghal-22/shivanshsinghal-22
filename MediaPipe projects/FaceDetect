import cv2
import mediapipe as mp
import time

class DetectFace():

    def __init__(self,static_image_mode=False,max_num_face=1,refine=False,min_detection_confidence=0.5,min_tracking_confidence=0.5):

        self.mode=static_image_mode
        self.maxFace = max_num_face
        self.refine=refine
        self.min_detection_confidence = min_detection_confidence
        self.min_tracking_confidence = min_tracking_confidence

        self.mpfacemodel = mp.solutions.face_mesh
        self.mpFace = self.mpfacemodel.FaceMesh(self.mode,self.maxFace,self.refine,self.min_detection_confidence,self.min_tracking_confidence)
        self.mpDraw = mp.solutions.drawing_utils
        self.drawingSpecs = self.mpDraw.DrawingSpec(thickness=1,circle_radius=2)

    def displayFace(self,img):

        imgRGB = cv2.cvtColor(img , cv2.COLOR_BGR2RGB)
        self.results = self.mpFace.process(imgRGB)

        if self.results.multi_face_landmarks:
            for lms in self.results.multi_face_landmarks:
                self.mpDraw.draw_landmarks(img,lms,self.mpfacemodel.FACEMESH_CONTOURS,self.drawingSpecs,self.drawingSpecs)

    def main(self):
        cam = cv2.VideoCapture(0)

        pTime = 0
        cTime = 0

        while True:

            success , img = cam.read()

            self.displayFace(img)
    
            cTime=time.time()
            fps = 1/(cTime-pTime)
            pTime = cTime

            cv2.putText(img,str(int(fps)),(10,70),cv2.FONT_HERSHEY_PLAIN, 3, (255, 0,255),3)
            cv2.imshow("Result",img)
            cv2.waitKey(1)

if __name__=="__main__":
    detector = DetectFace()
    detector.main()



